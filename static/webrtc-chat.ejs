<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/adapterjs@0.15.5/publish/adapter.min.js"></script>
  <style>
    * {
      box-sizing: border-box;
    }

    .remote-video:not(:last-child) {
      margin-right: 16px;
      margin-bottom: 16px;
    }
  </style>
</head>

<body>
  <div id="app">
    <div>
      <div>local tracks</div>
      <video ref="local-video" controls="true" height="240" width="320" autoplay></video>
    </div>
    <div>
      <div>
        <label for="username">username</label>
        <input name="username" type="text" v-model="username">
      </div>
      <div>
        <label for="channel">channel</label>
        <input name="channel" type="text" v-model="channel">
      </div>
      <button @click="onClickJoin">join</button>
      <button @click="onClickLeave">leave</button>
    </div>
    <div>
      <div>remote tracks</div>
      <div class="remote-video" v-for="remoteUser in remoteUsers" :key="remoteUser.username">
        <video :id="`remote-video-${remoteUser.username}`" controls="true" height="240" width="320" autoplay></video>
        <div>{{ remoteUser.username }}</div>
      </div>
    </div>
  </div>
  <script>
    const ACTIONS = {
      JOIN: 'join',
      LEAVE: 'leave',
      CALL: 'call',
      ANSWER: 'answer',
      ICE: 'ice'
    }
    const app = new Vue({
      data() {
        return {
          username: '',
          channel: '',
          ws: null,
          localStream: null,
          remoteUsers: []
        }
      },
      mounted() {
        this.ws = new WebSocket('wss://' + '<%=host%>' + ':9000')
        this.ws.onmessage = async (ws) => {
          console.log(ws.data)
          const message = JSON.parse(ws.data)
          if (message.action === 'user-join') {
            await this.onRemoteUserJoinChannel(message.data)
          }
          if (message.action === 'user-leave') {
            await this.onRemoteUserLeaveChannel(message.data)
          }
          if (message.action === 'call-response') {
            await this.onRemoteUserCallLocal(message.data)
          }
          if (message.action === 'answer-response') {
            await this.onRemoteUserAnswerCall(message.data)
          }
          if (message.action === 'receive-ice') {
            await this.onRemoteUserSendIce(message.data)
          }
        }
        AdapterJS.webRTCReady(() => {
          this.getLocalStream()
        })
      },
      methods: {
        getLocalStream() {
          getUserMedia(
            {
              audio: true,
              video: {
                width: 320,
                height: 240
              }
            },
            (stream) => {
              this.localStream = stream
              this.$refs['local-video'].srcObject = stream
            },
            () => {
              alert('unable to get local stream')
            }
          )
        },
        detectWsState() {
          if (this.ws && this.ws.readyState === 1) {
            return true
          }
          alert('did not connect to signal server')
          return false
        },
        joinChannel() {
          const { detectWsState, channel, username } = this
          if (detectWsState() && channel && username) {
            const message = {
              action: ACTIONS.JOIN,
              data: {
                channel,
                username
              }
            }
            this.ws.send(JSON.stringify(message))
          }
        },
        leaveChannel() {
          const { detectWsState, channel, username } = this
          if (detectWsState() && channel && username) {
            const message = {
              action: ACTIONS.LEAVE,
              data: {
                channel,
                username
              }
            }
            this.ws.send(JSON.stringify(message))
          }
        },
        async remoteUserJoinChannel(username) {
          const remoteUser = { username }
          const peerConnection = new RTCPeerConnection({
            iceServers: [
              {
                url: 'stun:stun.counterpath.net'
              }
            ]
          })
          peerConnection.addEventListener('icecandidate', (event) => {
            this.ws.send(JSON.stringify({
              action: ACTIONS.ICE,
              data: {
                ice: event.candidate,
                to: username,
                channel: this.channel,
                from: this.username
              }
            }))
          })
          peerConnection.addEventListener('connectionstatechange', (event) => {
            if (peerConnection.connectionState === 'connected') {
              document.getElementById('remote-video-' + username).srcObject = remoteUser.streams[0]
            }
          })
          peerConnection.addEventListener('track', (event) => {
            console.log(event)
            remoteUser.streams = event.streams
          })
          remoteUser.peerConnection = peerConnection
          this.localStream.getTracks().forEach(track => peerConnection.addTrack(track, this.localStream));
          const offer = await peerConnection.createOffer()
          const sdp = new RTCSessionDescription(offer)
          await peerConnection.setLocalDescription(sdp)
          this.remoteUsers.push(remoteUser)
          this.ws.send(JSON.stringify({
            action: ACTIONS.CALL,
            data: {
              offer,
              to: username,
              channel: this.channel,
              from: this.username
            }
          }))
        },
        async remoteUserCallLocal(data) {
          const { from, offer } = data
          const { localStream } = this
          const remoteUser = { username: from }
          const peerConnection = new RTCPeerConnection({
            iceServers: [
              {
                url: 'stun:stun.counterpath.net'
              }
            ]
          })
          peerConnection.addEventListener('icecandidate', (event) => {
            this.ws.send(JSON.stringify({
              action: ACTIONS.ICE,
              data: {
                ice: event.candidate,
                to: from,
                channel: this.channel,
                from: this.username
              }
            }))
          })
          peerConnection.addEventListener('connectionstatechange', (event) => {
            console.log(event)
            if (peerConnection.connectionState === 'connected') {
              document.getElementById('remote-video-' + from).srcObject = remoteUser.streams[0]
            }
          })
          peerConnection.addEventListener('track', (event) => {
            console.log(event)
            remoteUser.streams = event.streams
          })
          remoteUser.peerConnection = peerConnection
          this.localStream.getTracks().forEach(track => peerConnection.addTrack(track, this.localStream));
          const remoteSDP = new RTCSessionDescription(offer)
          await peerConnection.setRemoteDescription(remoteSDP)
          const answer = await peerConnection.createAnswer()
          const localSDP = new RTCSessionDescription(answer)
          await peerConnection.setLocalDescription(localSDP)
          this.remoteUsers.push(remoteUser)
          this.ws.send(JSON.stringify({
            action: ACTIONS.ANSWER,
            data: {
              answer,
              to: from,
              channel: this.channel,
              from: this.username
            }
          }))
        },
        async remoteUserAnswerCall(data) {
          const { from, answer } = data
          const { localStream, remoteUsers } = this
          const [targetUser] = remoteUsers.filter(({ username }) => username === data.from)
          if (targetUser) {
            const remoteSDP = new RTCSessionDescription(answer)
            await targetUser.peerConnection.setRemoteDescription(remoteSDP)
          }
        },
        async remoteUserSendIce(data) {
          const { from, ice } = data
          const { localStream, remoteUsers } = this
          const [targetUser] = remoteUsers.filter(({ username }) => username === data.from)
          if (targetUser) {
            if (ice) {
              targetUser.peerConnection.addIceCandidate(ice)
            }
          }
        },
        async remoteUserLeaveChannel(username) {
          // TODO
        },
        onClickJoin() {
          this.joinChannel()
        },
        onClickLeave() {
          this.leaveChannel()
        },
        async onRemoteUserJoinChannel(username) {
          await this.remoteUserJoinChannel(username)
        },
        async onRemoteUserLeaveChannel(username) {
          await this.remoteUserLeaveChannel(username)
        },
        async onRemoteUserCallLocal(data) {
          await this.remoteUserCallLocal(data)
        },
        async onRemoteUserAnswerCall(data) {
          await this.remoteUserAnswerCall(data)
        },
        async onRemoteUserSendIce(data) {
          await this.remoteUserSendIce(data)
        }
      }
    })
    app.$mount('#app')
  </script>
</body>

</html>